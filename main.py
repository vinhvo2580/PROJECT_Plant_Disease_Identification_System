import streamlit as st
import tensorflow as tf
import numpy as np
import os

#Tensorflow Model Prediction
def model_prediction(test_image):
    model = tf.keras.models.load_model("trained_plant_disease_model.keras")
    image = tf.keras.preprocessing.image.load_img(test_image,target_size=(128,128))
    input_arr = tf.keras.preprocessing.image.img_to_array(image)
    input_arr = np.array([input_arr]) #convert single image to batch
    predictions = model.predict(input_arr)
    return np.argmax(predictions) #return index of max element

#Sidebar
st.sidebar.title("B·∫£ng ƒëi·ªÅu khi·ªÉn")
app_mode = st.sidebar.selectbox("Ch·ªçn trang",["Trang ch·ªß","Gi·ªõi thi·ªáu","Nh·∫≠n bi·∫øt b·ªánh"])

#Main Page
if(app_mode=="Trang ch·ªß"):
    st.header("H·ªÜ TH·ªêNG NH·∫¨N BI·∫æT B·ªÜNH TH·ª∞C V·∫¨T")
    image_path = "home_page.jpeg"
    st.image(image_path,use_column_width=True)
    st.markdown("""
    Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi H·ªá th·ªëng nh·∫≠n bi·∫øt b·ªánh c√¢y tr·ªìng! üåøüîç
    
     Nhi·ªám v·ª• c·ªßa ch√∫ng t√¥i l√† gi√∫p x√°c ƒë·ªãnh b·ªánh c√¢y m·ªôt c√°ch hi·ªáu qu·∫£. T·∫£i h√¨nh ·∫£nh c√¢y l√™n v√† h·ªá th·ªëng c·ªßa ch√∫ng t√¥i s·∫Ω ph√¢n t√≠ch h√¨nh ·∫£nh ƒë√≥ ƒë·ªÉ ph√°t hi·ªán b·∫•t k·ª≥ d·∫•u hi·ªáu b·ªánh n√†o. C√πng nhau, ch√∫ng ta h√£y b·∫£o v·ªá c√¢y tr·ªìng c·ªßa ch√∫ng ta v√† ƒë·∫£m b·∫£o m·ªôt v·ª• thu ho·∫°ch l√†nh m·∫°nh h∆°n!

     ### L√†m th·∫ø n√†o n√≥ ho·∫°t ƒë·ªông
     1. **Upload Image:** V√†o trang **Disease Recognition** v√† t·∫£i l√™n h√¨nh ·∫£nh c√¢y nghi ng·ªù m·∫Øc b·ªánh.
     2. **Analysis:** H·ªá th·ªëng c·ªßa ch√∫ng t√¥i s·∫Ω x·ª≠ l√Ω h√¨nh ·∫£nh b·∫±ng c√°c thu·∫≠t to√°n ti√™n ti·∫øn ƒë·ªÉ x√°c ƒë·ªãnh c√°c b·ªánh ti·ªÅm ·∫©n.
     3. **Results:** Xem k·∫øt qu·∫£ v√† ƒë·ªÅ xu·∫•t h√†nh ƒë·ªông ti·∫øp theo.

     ### T·∫°i sao ch·ªçn ch√∫ng t√¥i?
     - **ƒê·ªô ch√≠nh x√°c:** H·ªá th·ªëng c·ªßa ch√∫ng t√¥i s·ª≠ d·ª•ng c√°c k·ªπ thu·∫≠t m√°y h·ªçc hi·ªán ƒë·∫°i ƒë·ªÉ ph√°t hi·ªán b·ªánh ch√≠nh x√°c.
     - **Th√¢n thi·ªán v·ªõi ng∆∞·ªùi d√πng:** Giao di·ªán ƒë∆°n gi·∫£n v√† tr·ª±c quan mang l·∫°i tr·∫£i nghi·ªám ng∆∞·ªùi d√πng li·ªÅn m·∫°ch.
     - **Nhanh ch√≥ng v√† Hi·ªáu qu·∫£:** Nh·∫≠n k·∫øt qu·∫£ sau v√†i gi√¢y, cho ph√©p ƒë∆∞a ra quy·∫øt ƒë·ªãnh nhanh ch√≥ng.

     ### B·∫Øt ƒë·∫ßu
     Nh·∫•p v√†o trang **Disease Recognition** trong thanh b√™n ƒë·ªÉ t·∫£i l√™n h√¨nh ·∫£nh v√† tr·∫£i nghi·ªám s·ª©c m·∫°nh c·ªßa H·ªá th·ªëng nh·∫≠n bi·∫øt b·ªánh th·ª±c v·∫≠t c·ªßa ch√∫ng t√¥i!

     ### V·ªÅ ch√∫ng t√¥i
     T√¨m hi·ªÉu th√™m v·ªÅ d·ª± √°n, nh√≥m c·ªßa ch√∫ng t√¥i v√† m·ª•c ti√™u c·ªßa ch√∫ng t√¥i tr√™n trang **About**.
    """)

#About Project
elif(app_mode=="Gi·ªõi thi·ªáu"):
    st.header("Gi·ªõi thi·ªáu")
    st.markdown("""
                #### Gi·ªõi thi·ªáu v·ªÅ T·∫≠p d·ªØ li·ªáu
                 T·∫≠p d·ªØ li·ªáu n√†y ƒë∆∞·ª£c t·∫°o l·∫°i b·∫±ng c√°ch s·ª≠ d·ª•ng t√≠nh nƒÉng tƒÉng c∆∞·ªùng ngo·∫°i tuy·∫øn t·ª´ t·∫≠p d·ªØ li·ªáu g·ªëc.
                 T·∫≠p d·ªØ li·ªáu n√†y bao g·ªìm kho·∫£ng 3k h√¨nh ·∫£nh rgb c·ªßa l√° c√¢y kh·ªèe m·∫°nh v√† b·ªã b·ªánh, ƒë∆∞·ª£c ph√¢n lo·∫°i th√†nh 38 l·ªõp kh√°c nhau.
                 M·ªôt th∆∞ m·ª•c m·ªõi ch·ª©a 33 ·∫£nh th·ª≠ nghi·ªám ƒë∆∞·ª£c t·∫°o ra nh·∫±m m·ª•c ƒë√≠ch d·ª± ƒëo√°n.
                #### N·ªôi dung
                1. train (2281 images)
                2. test (33 images)
                3. validation (1392 images)
                """)

#Prediction Page
elif(app_mode=="Nh·∫≠n bi·∫øt b·ªánh"):
    st.header("Nh·∫≠n bi·∫øt b·ªánh")
    test_image = st.file_uploader("Ch·ªçn m·ªôt ·∫£nh:")
    if(st.button("Hi·ªÉn th·ªã ·∫£nh")):
        st.image(test_image,width=4,use_column_width=True)
    #Predict button
    if(st.button("D·ª± ƒëo√°n")):
        st.success("K·∫øt qu·∫£ d·ª± ƒëo√°n s·∫Ω ƒë∆∞·ª£c hi·ªÉn th·ªã ·ªü ƒë√¢y.")
        if test_image is not None:
            # Save the uploaded file to a temporary location
            with open("temp_image.jpg", "wb") as f:
                f.write(test_image.read())
            # Use the saved file path to load and predict
            result_index = model_prediction("temp_image.jpg")
            # Remove the temporary file
            os.remove("temp_image.jpg")

        #Reading Labels
        class_name = ['Apple___Apple_scab', 'Apple___Black_rot', 'Apple___Cedar_apple_rust', 'Apple___healthy',
                    'Blueberry___healthy', 'Cherry_(including_sour)___Powdery_mildew', 
                    'Cherry_(including_sour)___healthy', 'Corn_(maize)___Cercospora_leaf_spot Gray_leaf_spot', 
                    'Corn_(maize)___Common_rust_', 'Corn_(maize)___Northern_Leaf_Blight', 'Corn_(maize)___healthy', 
                    'Grape___Black_rot', 'Grape___Esca_(Black_Measles)', 'Grape___Leaf_blight_(Isariopsis_Leaf_Spot)', 
                    'Grape___healthy', 'Orange___Haunglongbing_(Citrus_greening)', 'Peach___Bacterial_spot',
                    'Peach___healthy', 'Pepper,_bell___Bacterial_spot', 'Pepper,_bell___healthy', 
                    'Potato___Early_blight', 'Potato___Late_blight', 'Potato___healthy', 
                    'Raspberry___healthy', 'Soybean___healthy', 'Squash___Powdery_mildew', 
                    'Strawberry___Leaf_scorch', 'Strawberry___healthy', 'Tomato___Bacterial_spot', 
                    'Tomato___Early_blight', 'Tomato___Late_blight', 'Tomato___Leaf_Mold', 
                    'Tomato___Septoria_leaf_spot', 'Tomato___Spider_mites Two-spotted_spider_mite', 
                    'Tomato___Target_Spot', 'Tomato___Tomato_Yellow_Leaf_Curl_Virus', 'Tomato___Tomato_mosaic_virus',
                      'Tomato___healthy']
        st.success("M√¥ h√¨nh d·ª± ƒëo√°n ƒë√≥ l√† m·ªôt {}".format(class_name[result_index]))
else:
        st.error("Vui l√≤ng t·∫£i l√™n m·ªôt h√¨nh ·∫£nh tr∆∞·ªõc khi d·ª± ƒëo√°n.")